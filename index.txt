1488. Shortest distance

There are N villages, numbered 1 to N.

Between the villages, there are M undirected roads. The i-th road connects village Aᵢ and village Bᵢ, and its length is Cᵢ.

It is guaranteed that all villages are connected.

There are K villages with shops. The number of the j-th shop village is Xⱼ.

Then, there are Q queries. For the k-th query, you are given a village number Yₖ, and you need to determine the shortest distance from village Yₖ to its nearest shop.

Input format

The first line contains two integers N and M.

The next M lines each contain three integers Aᵢ, Bᵢ, Cᵢ, meaning that the i-th road connects villages Aᵢ and Bᵢ, with length Cᵢ.

The next line contains the integer K.

The next K lines each contain an integer Xⱼ, the number of a village with a shop.

The next line contains the integer Q.

The next Q lines each contain an integer Yₖ, the number of the village being queried.

Output format

For each query, output a single integer: the shortest distance from that village to the nearest shop.

Data constraints

2 ≤ N ≤ 10^5

N − 1 ≤ M ≤ min(N(N−1)/2, 10^5)

1 ≤ Q ≤ 10^5

1 ≤ K ≤ N

1 ≤ Cᵢ ≤ 10000


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Problem: Connect Tourist Attractions (Minimum Road Cost)

You are the mayor of a very old city with n major tourist attractions. The i-th
attraction is at 3D coordinates (xi, yi, zi).

To build a bidirectional road between two attractions A(x1, y1, z1) and
B(x2, y2, z2), the cost is:
    cost(A, B) = min( |x1 - x2|, |y1 - y2|, |z1 - z2| )

Build a network of roads so that it is possible to travel between any pair of
attractions (the graph is connected) and the total cost is minimized.
Return the minimum total cost.

Input format
- First line: integer n
- Next n lines: three integers xi yi zi for each attraction

Output format
- One integer: the minimum total cost to connect all attractions

Sample Input
3
1 5 7
2 9 4
1 3 9

Sample Output
1


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

CSES – Investigation

You are given a directed, weighted graph with nodes 1..n and m edges.
Each edge is a flight (a → b) with a non-negative cost c.

Task:
From node 1 to node n, compute the following:
1) The minimum total cost.
2) The number of distinct shortest paths (mod 1,000,000,007).
3) The minimum number of edges among all shortest paths.
4) The maximum number of edges among all shortest paths.

Two paths are considered different if their sequences of vertices/edges differ.
Only paths whose total cost equals the minimum cost are considered in (2)–(4).

Input:
- First line: n m
- Next m lines: a b c  (an edge from a to b with cost c)

Output:
- Four integers on one line:
  min_cost  count_mod  min_edges_on_shortest  max_edges_on_shortest

Constraints (typical):
- 1 ≤ n ≤ 1e5
- 1 ≤ m ≤ 2e5
- 1 ≤ a, b ≤ n
- 0 ≤ c ≤ 1e9
- Graph is directed; costs are non-negative (so Dijkstra applies).

Notes:
- Use Dijkstra from node 1 to obtain shortest distances.
- While relaxing edges, also maintain for each node:
  ways[v] = # of shortest paths to v (mod 1e9+7),
  mn[v]   = minimum edges on a shortest path to v,
  mx[v]   = maximum edges on a shortest path to v.


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Time limit: 1.00 s
Memory limit: 512 MB

Your task is to find a minimum-price flight route from Syrjälä to Metsälä. You have one discount coupon, using which you can halve the price of any single flight during the route. However, you can only use the coupon once.
When you use the discount coupon for a flight whose price is x, its price becomes \lfloor x/2 \rfloor (it is rounded down to an integer).
Input
The first input line has two integers n and m: the number of cities and flight connections. The cities are numbered 1,2,\ldots,n. City 1 is Syrjälä, and city n is Metsälä.
After this there are m lines describing the flights. Each line has three integers a, b, and c: a flight begins at city a, ends at city b, and its price is c. Each flight is unidirectional.
You can assume that it is always possible to get from Syrjälä to Metsälä.
Output
Print one integer: the price of the cheapest route from Syrjälä to Metsälä.
Constraints

2 \le n \le 10^5
1 \le m \le 2 \cdot 10^5
1 \le a,b \le n
1 \le c \le 10^9

Example
Input:
3 4
1 2 3
2 3 1
1 3 7
2 1 5

Output:
2

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Time limit: 1.00 s
Memory limit: 512 MB

You are given a map of a labyrinth, and your task is to find a path from start to end. You can walk left, right, up and down.
Input
The first input line has two integers n and m: the height and width of the map.
Then there are n lines of m characters describing the labyrinth. Each character is . (floor), # (wall), A (start), or B (end). There is exactly one A and one B in the input.
Output
First print "YES", if there is a path, and "NO" otherwise.
If there is a path, print the length of the shortest such path and its description as a string consisting of characters L (left), R (right), U (up), and D (down). You can print any valid solution.
Constraints

1 \le n,m \le 1000

Example
Input:
5 8
########
#.A#...#
#.##.#B#
#......#
########

Output:
YES
9
LDDRRRRRU

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
